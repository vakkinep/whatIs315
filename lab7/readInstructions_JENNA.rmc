/*----------------------------------------------------------------------
 * Lab 7 (MIPS Pipeline Simulator) - CPE 315
 * Jenna Stephens
 * Venkat Akkinepally
 * Austin Whaley
 *----------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "readInstructions.h"
#include "startChecks.h"
#include "mips_asm_header.h"

//============GLOBAL VARIABLES
MIPS mem[1024];	                                                       	         /* Room for 4K bytes */
unsigned int heap[4096];

extern int haltflag;


int syscall(unsigned int v0_value) {
   if (v0_value == 10) {
      return 1; 
   }
   return 0;
}

int eff_addr(int pc, int imm_value) {                                           //I Types, Branches only
   int eff_addr;

   eff_addr = pc + imm_value;
   return eff_addr;
}

unsigned int jmp_addr(MIPS ir) {                                                         //J Types
   unsigned int jmp_addr;

   jmp_addr = (ir & 0x03FFFFFF);

   jmp_addr <<= 2;   
   return jmp_addr;
}

unsigned int eff_addr_load(MIPS ir) {
   unsigned int ext_imm = (ir & 0x0000FFFF);
   ext_imm |= ((ext_imm & 0x8000) ? 0xFFFF0000 : 0);
   return ext_imm;
}

INST execute_r_helper(INST instruct) {
   switch (instruct.func_code) {
      case 0x20:  // (add) 
         instruct.rd_value = (int)instruct.rs_value + (int)instruct.rt_value;
         break;
      case 0x21:  // (addu)
         instruct.rd_value = (unsigned int)instruct.rs_value + (unsigned int)instruct.rt_value;
         break;   
      case 0x22:  // (sub)
         instruct.rd_value = (int)instruct.rs_value - (int)instruct.rt_value;
         break;
      case 0x23:  // (subu)
         instruct.rd_value = (unsigned int)instruct.rs_value - (unsigned int)instruct.rt_value;
         break;   
      case 0x24:  // (and)
         instruct.rd_value = (unsigned int)instruct.rs_value & (unsigned int)instruct.rt_value;
         break;   
      case 0x27:  // (nor)
         instruct.rd_value = (unsigned int)instruct.rs_value | (unsigned int)instruct.rt_value;
         break;   
      case 0x25:  // (or)
         instruct.rd_value = (unsigned int)instruct.rs_value | (unsigned int)instruct.rt_value;
         break;   
      case 0x26:  // (xor)
         instruct.rd_value = (unsigned int)instruct.rt_value ^ (unsigned int)instruct.rt_value;
         break;   
      case 0x00:  // (sll)
         instruct.rd_value = (unsigned int)instruct.rt_value << instruct.shamt;
         break;   
      case 0x02:  // (srl)
         instruct.rd_value = (unsigned int)instruct.rt_value >> instruct.shamt;
         break;   
      case 0x03:  // (sra)
         instruct.rd_value = (int)instruct.rt_value >> instruct.shamt;
         break;   
      case 0x04:  // (sllv)
         instruct.rd_value = (unsigned int)instruct.rt_value << (unsigned int)instruct.rt_value; 
         break;   
      case 0x06:  // (srlv)
         instruct.rd_value = (unsigned int)instruct.rt_value >> (unsigned int)instruct.rt_value; 
         break;   
      case 0x07:  // (srav)
         instruct.rd_value = (int)instruct.rt_value >> (int)instruct.rt_value; 
         break;   
      case 0x2A:  // (slt)
         instruct.rd_value = (int)instruct.rt_value < ((int)instruct.rt_value)? 1:0; 
         break;   
      case 0x2B:  // (sltu)
         instruct.rd_value = (unsigned int)instruct.rt_value < ((unsigned int)instruct.rt_value)? 1:0; 
         break;   
      case 0x08:  // (jr)
      case 0x09:  // (jalr)
      	 //jump address already calculated
         break;
      }
   return instruct;
}

INST execute_i_helper(INST instruct) {
	printf("opcode = %d\n", instruct.opcode);
   switch (instruct.opcode) {
      case 0x08:   // I Type (addi) 
         instruct.rt_value = (int) instruct.rs_value  + (int) instruct.immed;
         break;    
      case 0x09:  // Type (addiu)
         instruct.rt_value = (unsigned int) instruct.rs_value + (unsigned int) instruct.immed; 
         break;    
      case 0x0C:  // I Type (andi) 
         instruct.rt_value = (unsigned int) instruct.rs_value & (unsigned int) instruct.rt_value; 
         break;    
      case 0x0D:  // I Type (ori)
         instruct.rt_value = (unsigned int) instruct.rs_value | (unsigned int) instruct.immed;
         break;    
      case 0x0E:  // I Type (xori)
         instruct.rt_value = (unsigned int) instruct.rs_value ^ (unsigned int) instruct.immed;
         break;     
      case 0x0A:  // I Type (slti) 
         instruct.rt_value =  (int) instruct.rs_value < (int) instruct.immed;
         break;   
      case 0x0B:  // I Type (sltiu)
         instruct.rt_value =  (unsigned int) instruct.rs_value < (unsigned int) instruct.immed; 
         break;     
   }
   return instruct;
}

INST execute_s_helper(INST instruct) {
	instruct.eff_addr = eff_addr_load(instruct.curr_instruction);
   switch (instruct.opcode) {
      case 0x24:  // I Type (lbu) 
      case 0x25:  // I Type (lhu)
         instruct.heap_addr = (unsigned int)instruct.rt_value + (unsigned int)instruct.eff_addr;
         break; 
      case 0x20:  // I Type (lb)
      case 0x21:  // I Type (lh)
      case 0x0F:  // I Type (lui)
      case 0x23:  // I Type (lw)
         instruct.heap_addr = instruct.rt_value + instruct.eff_addr;
         break;
      case 0x28:  // I Type (sb) 
      case 0x29:  // I Type (sh) 
      case 0x2B:  // I Type (sw) 
         instruct.heap_addr = instruct.rs + instruct.eff_addr;
         break; 
   }
   return instruct;
}

INST execute_b_helper(INST instruct) {
   switch (instruct.opcode) {
      case 0x04:     // I Type (beq) 
         if (instruct.rs == instruct.rt) {
            instruct.brn_addr = instruct.pc + eff_addr(instruct.pc, instruct.immed);
         }
         break;
      case 0x05:     // I Type (bne)
         if (instruct.rs != instruct.rt) {
            instruct.brn_addr = instruct.pc + eff_addr(instruct.pc, instruct.immed);
         }
         break;
   }
   return instruct;
}

INST execute_j_helper(INST instruct) {
    instruct.jmp_addr = jmp_addr(instruct.curr_instruction);
	return instruct;
}


INST execute(INST instruct) {
   if (instruct.type == 'r') {      //R Types
   	  printf("R Type\n");
      return execute_r_helper(instruct);
   }

   else if (instruct.type == 'i') {    //I Types
      printf("I Type\n");
      return execute_i_helper(instruct); 
   }

   else if (instruct.type == 's') {    //Load and Store Types
      printf("Load and Store\n");
      return execute_s_helper(instruct);
   }

   else if (instruct.type == 'b') {    //Branch Type
      printf("Branch\n");
      return execute_b_helper(instruct);
   }

   else if (instruct.type == 'j') {    //Jump Type
   	  printf("Jump\n");
      return execute_j_helper(instruct);
   }  

   else if (instruct.curr_instruction == 0x0000000C) { //HALT
   		printf("Syscall\n");
      if (syscall(instruct.rs_value)) {
      	 haltflag = 1;
         return instruct;
      }
   }
   else { 
   		printf("Could not find type\n");
      return instruct;
   }
}


INST memory(INST instruct) {
   if (instruct.type == 's') {      //Load and Store 
      switch (instruct.opcode) {
         case 0x20:           // I Type (lb) 
            instruct.rt_value = heap[instruct.heap_addr] & 0x000000FF;
            break;
         case 0x24:           // I Type (lbu) 
            instruct.rt_value = heap[instruct.heap_addr] & 0x000000FF;
            break;
         case 0x21:           // I Type (lh)
            instruct.rt_value = heap[instruct.heap_addr] & 0x0000FFFF;
            break;
         case 0x25:           // I Type (lhu)
            instruct.rt_value = heap[instruct.heap_addr] & 0x0000FFFF;
            break; 
         case 0x0F:           // I Type (lui)
            instruct.rt_value = heap[instruct.heap_addr] & 0xFFFF0000;
            break;
         case 0x23:           // I Type (lw)
            instruct.rt_value = heap[instruct.heap_addr];
            break;
         case 0x28:           // I Type (sb) 
            heap[instruct.heap_addr] = instruct.rt_value & 0x000000FF;
            break;
         case 0x29:          // I Type (sh) 
            heap[instruct.heap_addr] = instruct.rt_value & 0x0000FFFF;
            break;
         case 0x2B:         // I Type (sw) 
            heap[instruct.heap_addr] = instruct.rt_value;
            break; 
         }

   }

   if (instruct.type == 'b') {  //Branch
      switch (instruct.opcode) {
         case 0x04:     // I Type (beq) 
            if (instruct.rs == instruct.rt) {
               instruct.pc = instruct.brn_addr;    //set pc to branch address
            }
            break;
         case 0x05:     // I Type (bne)
            if (instruct.rs != instruct.rt) {
               instruct.pc = instruct.brn_addr;    //set pc to branch address
            }
            break;
      }

   }

   if (instruct.type == 'j') {     //Jump
         if (instruct.opcode == 0x03 || instruct.func_code == 0x09) {  // (jal, jalr)
            instruct.ra = instruct.pc;
         }
         instruct.pc = instruct.jmp_addr;
   }

   return instruct;
}

int sign_ext(INST instruction) {
   int sign;
   unsigned int sign_ext;

   sign_ext = instruction.immed;
   sign = (instruction.immed & 0x00008000);

   if (sign) {
      sign_ext |= 0xFFFF0000; 
   }

   return sign_ext;
}

int reg_s(MIPS ir) {
   int rs = (ir >> 21) & 0x1F;
   return rs;
}

int reg_t(MIPS ir) {
   int rt = (ir >> 16) & 0x1F;
   return rt;
}

int reg_d(MIPS ir) {
   int rd = (ir >> 11) & 0x1F;
   return rd;
}

void printReg(int reg, char* title) { //title will be which register (rs, rt, rd)
   int name;
   if (reg == 0) {
      printf("%s=%d ($zero), ", title, reg);
   } else if (reg <= 3) {
      name= reg - 2;
      printf("%s=%d ($v%d), ", title, reg, name);
   } else if (reg <= 7) {
      name= reg - 4;
      printf("%s=%d ($a%d), ", title, reg, name);
   } else if (reg <= 15) {
      name= reg - 8;
      printf("%s=%d ($t%d), ", title, reg, name);
   } else if (reg <= 23) {
      name= reg - 16;
      printf("%s=%d ($s%d), ", title, reg, name);
   } else if (reg == 31) {
      printf("%s=%d ($ra), ", title, reg);
   }
}

void printValues(INST instruction) {                                             // Prints the instruction values
   printf("OPCODE: 0x%02X\tTYPE: %c\n",instruction.opcode, instruction.type);
   switch (instruction.type) {
      case ('r') : 
         printf("values: \n");                                 
         printReg(instruction.rs, "rs");
         printReg(instruction.rt, "rt");
         printReg(instruction.rd, "rd");
         printf("\n");
         printf("SHAMT: %d\t FUNCTION: 0x%02X\n", instruction.shamt, instruction.func_code);
         break;
      case ('i') :                                            
         printf("values: \n");
         printReg(instruction.rs, "rs");
         printReg(instruction.rt, "rt");
         printf("Immed value: 0x%04X\n", instruction.immed);
         break;
      case ('b') : 
         printf("values: \nBranch Address: 0x%08X\n", instruction.brn_addr);
         break;                                              
      case ('s') : 
         printf("values: \n");
         printReg(instruction.rs, "rs");
         printReg(instruction.rt, "rt");
         printf("Immed value: 0x%04X\t", instruction.immed);
         printf("Sign Ext: 0x%08X\n", sign_ext(instruction));
         printf("EffAddr=R[ ");
         printReg(instruction.rs, "rs");
         printf("] + 0x%08X\n",sign_ext(instruction));
         break;                                             
      case ('j') : printf("jmp_addr=0x%06X\n", instruction.jmp_addr); break;
      case ('n') : break;                                  
   }
}
